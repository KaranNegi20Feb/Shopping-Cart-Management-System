import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchItems,updateItem,deleteItem,addItem } from './cartAPI';

const initialState = {
  items:[],
  status: 'idle',
};

export const fetchAsync = createAsyncThunk(
  'cart/fetchItems',
  async () => {
    const response = await fetchItems();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const addAsync = createAsyncThunk(
  'cart/addItem',
  async (item) => {
    const {id,title,brand,thumbnail,price}=item;
    const response = await addItem({id,title,brand,thumbnail,price,quantity:1});
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const deleteAsync = createAsyncThunk(
  'cart/deleteItem',
  async (id) => {
    await deleteItem(id);
    // The value we return becomes the `fulfilled` action payload
    return id;
  }
);

export const updateAsync = createAsyncThunk(
  'cart/updateItem',
  async ({id,change}) => {
    const response=await updateItem(id,change);
    return response.data;
  }
);


export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  
  reducers: {
    increment: (state) => {
      
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = action.payload;
      })
      .addCase(addAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload);
      })
      .addCase(deleteAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index=state.items.findIndex(item=>item.id===action.payload)
        state.items.splice(index,1);
      })
      .addCase(updateAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index=state.items.findIndex(item=>item.id===action.payload.id)
        state.items.splice(index,1,action.payload);
      });
  },
});

export const { increment, decrement, incrementByAmount } = cartSlice.actions;



export default cartSlice.reducer;
